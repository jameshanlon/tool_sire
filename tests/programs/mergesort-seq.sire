val LENGTH := 1500;
var a[LENGTH];

% Merge
proc merge(a[], b[], c[], val m, val n) is
  var i;
  var j;
  var k;
{ i:=0 
; j:=0 
; k:=0
; while (i<m) and (j<n) do 
  { if(a[i] <= b[j])
    then 
    { c[k] := a[i] 
    ; i:=i+1 ; k:=k+1
    } 
    else 
    { c[k] := b[j]
    ; j:=j+1 ; k:=k+1
    }
  }
; if i<m then c[k] := a[i] else skip
; if j<n then c[k] := b[j] else skip
}

% Merge sort
proc msort(array[], val len) is
  var a[];
  var b[]; 
  var i;
  var j;
{ if len > 1 then 
  { i := len / 2
  ; j := len - i
  ; a aliases array[0..]
  ; b aliases array[i..]
  ; msort(a, i)
  ; msort(b, j)
  ; merge(a, b, array, i, j)
  }
  else skip
}

% Main
proc main() is
  var i;
{ for i:=0 to LENGTH-1 do 
    a[i] := LENGTH-i
; msort(a, LENGTH)
; for i:=0 to LENGTH-1 do
    printval(a[i])
}
