val LENGTH := 10;
var a[LENGTH];
var scratch[LENGTH];

% Merge
proc merge(a[], b[], array[], val m, val n) is
  var i;
  var j;
  var k;
{ i:=0 
; j:=0 
; k:=0
; while (i < m) and (j < n) do 
  { if(a[i] <= b[j])
    then 
    { scratch[k] := a[i]
    ; i := i+1
    } 
    else 
    { scratch[k] := b[j]
    ; j := j+1 
    }
    ; k := k+1
  }
; if i<m then
    while i<m do
    {  scratch[k] := a[i] 
    ; k := k+1
    ; i := i+1
    }
  else skip
; if j<n then 
    while j<n do
    { scratch[k] := b[j] 
    ; k := k+1
    ; j := j+1
    }
  else skip

  % Copy scratch back into the array
; for i:=0 to m+n-1 do
  { array[i] := scratch[i]
  }
}

% Merge sort
proc msort(array[], val len) is
  var a[];
  var b[]; 
  var m;
  var n;
{ if len > 1 then
  { m := len >> 1
  ; n := len - m
  ; a aliases array[0..]
  ; b aliases array[m..]
  ; msort(a, m)
  ; msort(b, n)
  ; merge(a, b, array, m, n)
  }
  else skip
}

% Ouput: 0123456789
proc main() is
  var i;
{ for i:=0 to LENGTH-1 do 
    a[i] := LENGTH-(i+1)
; msort(a, LENGTH)
; for i:=0 to LENGTH-1 do
    printval(a[i])
; printstrln("")
}

