% An implementation of Cannon's algorithm for matrix multiplication.
% Notation: 
%  - (i, j) denotes (row, col)
%  - A, B, C and N*N matrices
%  - Matrices are distributed with submatrices of size (N/R)^2

val N is 320; % Dimension of square matrix
val R is 32;  % Num partitions per dimension
val M is N/R; % Submatrix dimension
val X is R*R; % Num channels in a dimension
val MATRIX_STORAGE is M*M;

proc zeromatrix(var A[MATRIX_STORAGE]) is
{ var x;
  var y;
  for x in [0 for M] do % Row
    for y in [0 for M] do % Col
      A[(x*M)+y] := 0
}

% C = C + A*B
proc muladd(
    var A[MATRIX_STORAGE], 
    var B[MATRIX_STORAGE], 
    var C[MATRIX_STORAGE]) is
{ var x;
  var y;
  var z;
  for x in [0 for M] do % Row
    for y in [0 for M] do % Col1
      for z in [0 for M] do % Col2
        C[(x*M)+y] := C[(x*M)+y] + (A[(x*M)+y] * B[(y*M)+z])
}

proc send_submatrix(chanend c, var X[MATRIX_STORAGE]) is
{ var i;
  for i in [0 for MATRIX_STORAGE] do 
    c ! X[i]
}

proc recv_submatrix(chanend c, var X[MATRIX_STORAGE]) is
{ var i;
  for i in [0 for MATRIX_STORAGE] do 
    c ? X[i]
}

proc cell(val i, val j, chanend n, chanend s, chanend e, chanend w) is
{ var A[];
  var B[];
  var C[];
  var k;

  memalloc(A, MATRIX_STORAGE);
  memalloc(B, MATRIX_STORAGE);
  memalloc(C, MATRIX_STORAGE);
  zeromatrix(A);
  zeromatrix(B);
  zeromatrix(C);
  
  % Circularly shift west each matrix A_{i,j} by i columns
  for k in [0 for i] do
    if j = 0
    then
    { send_submatrix(w, A);
      recv_submatrix(e, A)
    }
    else
    { recv_submatrix(e, A);
      send_submatrix(w, A)
    };

  % Circularly shift north each matrix B_{i,j} by j rows
  for k in [0 for j] do
    if i = 0
    then
    { send_submatrix(s, B);
      recv_submatrix(n, B)
    }
    else
    { recv_submatrix(n, B);
      send_submatrix(s, B)
    };
  
  % Compute C_{i,j}=A_{i,j}*B_{i,j}+C_{,j},
  % circularly shift east A_{i,j} and north B_{i,j} by one.
  for k in [0 for R] do
    if (i = 0) and (j = 0)
    then
    { muladd(A, B, C);
      send_submatrix(w, A);
      recv_submatrix(e, A);
      
      send_submatrix(n, B);
      recv_submatrix(s, B)
    }
    else if i = 0
    then
    { muladd(A, B, C);
      recv_submatrix(e, A);
      send_submatrix(w, A);

      send_submatrix(n, B);
      recv_submatrix(s, B)
    }
    else if j = 0
    then
    { muladd(A, B, C);
      send_submatrix(w, A);
      recv_submatrix(e, A);

      recv_submatrix(s, B);
      send_submatrix(n, B)
    }
    else
    { muladd(A, B, C);
      recv_submatrix(e, A);
      send_submatrix(w, A);

      recv_submatrix(s, B);
      send_submatrix(n, B)
    };

  memfree(A);
  memfree(B);
  memfree(C)
}

proc main() is
{ chan x[X];
  chan y[X];
  var i;
  var j;
  par i in [0 for R], j in [0 for R] do
    cell(i, j, y[(j*R)+i], y[(j*R)+((i+1) rem R)], 
               x[(i*R)+j], x[(i*R)+((j+1) rem R)])
}

