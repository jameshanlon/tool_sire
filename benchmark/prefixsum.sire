% Based on 'Prefix Sums and Their Applications' by Guy E. Blelloch

val nLEAVES is NUM_CORES; % Number of leaves (storage units)
val LENGTH  is 128; % Must divide by nLEAVES
val STORAGE is LENGTH/nLEAVES; % Storage per leaf

proc leaf(val id, chanend c, chanend pipeIn, chanend pipeOut) is
{ var data[];
  var total;
  var sum;
  var i;
  var value;
  var t1;
  var t2;
  
  % Allocate storage
  memalloc(data, STORAGE);

  % Initialise
  for i in [0 for LENGTH] do
  { pipeIn ? value;
    % Store subset of values
    if (i >= (id*STORAGE)) and (i < ((id+1)*STORAGE))
    then
      data[i-(id*STORAGE)] := value
    else skip;
    % Pass on the value
    if (id + 1) < nLEAVES
    then
      pipeOut ! value
    else skip
  };

  time(t1);

  % Sum segment
  total := 0;
  for i in [0 for STORAGE] do
    total := total + data[i];

  % Collect
  c ! total;

  % Distribute
  c ? sum;
  c ! total;

  % Update segment to have prefix sums
  for i in [0 for STORAGE] do
  { sum := sum + data[i];
    data[i] := sum
  };

  time(t2);

  % Return maximum time taken
  pipeIn ? value;
  if (t2-t1) > value
  then
    pipeOut ! t2-t1
  else
    pipeOut ! value;

  % Send results
  for i in [0 for LENGTH] do
  { if i < (id*STORAGE)
    then
    { pipeIn ? value;
      pipeOut ! value
    }
    else if i < ((id+1)*STORAGE)
    then
      pipeOut ! data[i-(id*STORAGE)]
    else skip
  };

  % Deallocate storage
  memfree(data)
}

proc branch(chanend root, chanend left, chanend right) is
{ var v1;
  var v2;
  var total;
  var sum;
  var v;
  
  % Collect
  left ? v1;
  right ? v2;
  total := v1 + v2;
  root ! total;

  % Distribute
  root ? sum;
  left ! sum;
  left ? v1;
  right ! v1 + sum;
  right ? v2;
  root ! total
}

proc root(chanend root) is
{ var v;

  % Collect
  root ? v;

  % Distribute
  root ! 0;
  root ? v
}

proc controller(chanend pipeIn, chanend pipeOut) is
{ var i;
  var value;
  % Load values
  for i in [0 for LENGTH] do
    pipeIn ! 1;
  % Receive time
  pipeIn ! 0;
  pipeOut ? value;
  printvalln(value);
  % Display result
  for i in [0 for LENGTH] do
  { pipeOut ? value;
    printvalln(value)
  }
}

proc main() is
{ chan c[(2*nLEAVES)-1];
  chan p[nLEAVES+1];
  var x;
  controller(p[0], p[nLEAVES]) &
  par x in [0 for nLEAVES] do 
    leaf(x, c[(nLEAVES-1)+x], p[x], p[x+1]) &
  root(c[0]) &
  par x in [0 for nLEAVES-1] do
    branch(c[x], c[(2*x)+1], c[(2*x)+2])
}
