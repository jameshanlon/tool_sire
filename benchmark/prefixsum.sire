% Based on 'Prefix Sums and Their Applications' by Guy E. Blelloch

val N       is 128; % Number of leaves (storage units)
val EXP     is 12; % 4096
val LENGTH  is 1 << EXP;
val STORAGE is LENGTH/N; % Storage per leaf

proc leaf(chanend c) is
{ var data[];
  var total;
  var sum;
  var i;
  
  % Allocate storage
  memalloc(data, STORAGE);

  % Initialise
  for i in [0 for STORAGE] do
    data[i] := 1;

  % Sum segment
  total := 0;
  for i in [0 for STORAGE] do
    total := total + data[i];

  % Collect
  c ! total;

  % Distribute
  c ? sum;
  c ! total;

  % Update segment to have prefix sums
  for i in [0 for STORAGE] do
  { total := total + data[i];
    data[i] := total
  };

  % Deallocate storage
  memfree(data)
}

proc branch(chanend root, chanend left, chanend right) is
{ var v1;
  var v2;
  var total;
  var sum;
  var v;
  
  % Collect
  left ? v1;
  right ? v2;
  total := v1 + v2;
  root ! total;

  % Distribute
  root ? sum;
  left ! v;
  left ? v;
  right ! v + total;
  right ? v;
  root ! total
}

proc root(chanend root) is
{ var v;

  % Collect
  root ? v;

  % Distribute
  root ! 0;
  root ? v
}

proc main() is
{ chan c[(2*N)-1];
  var i;
  server() 
    par i in [0 for N] do 
      leaf(c[(N-1)+i])
  { root(c[0]) &
    par i in [0 for N-1] do
      branch(c[i], c[(2*i)+1], c[(2*i)+2])
  }
}

