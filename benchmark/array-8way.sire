val STORAGE     is 4;  % Storage per leaf
val N           is 64; % Number of leaves (storage units)
val DEGREE      is 8;
val BRANCHES    is N/(DEGREE-1);
val LENGTH      is N*STORAGE;
val READ        is 0;
val WRITE       is 1;
val HALT        is 2;

proc sync(chanend c) is
{ var sync;
  c ? sync
}

proc read(chanend c, val index, var value) is
{ c ! READ;
  c ! index;
  c ? value
}

proc write(chanend c, val index, val value) is
{ c ! WRITE;
  c ! index;
  c ! value
}

proc halt(chanend c) is
  c ! HALT

proc branch(chanend root, 
    chanend c0, 
    chanend c1, 
    chanend c2, 
    chanend c3,
    chanend c4, 
    chanend c5, 
    chanend c6, 
    chanend c7) is
{ var depth;
  var base;
  var interval;
  var query;
  var index;
  var value;
  var running;
 
  % Synchronise
  sync(c0);
  sync(c1);
  sync(c2);
  sync(c3);
  sync(c4);
  sync(c5);
  sync(c6);
  sync(c7);
  root ! 0;
 
  % Configure: depth, base, interval
  root  ? depth;
  root  ? base;
  root  ? interval;
  c0 ! depth + 1;
  c1 ! depth + 1;
  c2 ! depth + 1;
  c3 ! depth + 1;
  c4 ! depth + 1;
  c5 ! depth + 1;
  c6 ! depth + 1;
  c7 ! depth + 1;
  c0 ! base;
  c1 ! base + (1*(interval/DEGREE));
  c2 ! base + (2*(interval/DEGREE));
  c3 ! base + (3*(interval/DEGREE));
  c1 ! base + (4*(interval/DEGREE));
  c2 ! base + (5*(interval/DEGREE));
  c3 ! base + (6*(interval/DEGREE));
  c3 ! base + (7*(interval/DEGREE));
  c0 ! interval/DEGREE;
  c1 ! interval/DEGREE;
  c2 ! interval/DEGREE;
  c3 ! interval/DEGREE;
  c4 ! interval/DEGREE;
  c5 ! interval/DEGREE;
  c6 ! interval/DEGREE;
  c7 ! interval/DEGREE;
  
  % Run
  running := true;
  while running do
  { root ? query;
    if query = READ
    then 
    { root ? index;
      if index < base+(interval/DEGREE)
      then
        read(c0, index, value)
      else if index < base+(2*(interval/DEGREE))
      then
        read(c1, index, value)
      else if index < base+(3*(interval/DEGREE))
      then
        read(c2, index, value)
      else if index < base+(4*(interval/DEGREE))
      then
        read(c3, index, value)
      else if index < base+(5*(interval/DEGREE))
      then
        read(c4, index, value)
      else if index < base+(6*(interval/DEGREE))
      then
        read(c5, index, value)
      else if index < base+(7*(interval/DEGREE))
      then
        read(c6, index, value)
      else
        read(c7, index, value);
      root ! value
    }
    else if query = WRITE
    then
    { root ? index;
      root ? value;
      if index < base+(interval/DEGREE)
      then
        write(c0, index, value)
      else if index < base+(2*(interval/DEGREE))
      then
        write(c1, index, value)
      else if index < base+(3*(interval/DEGREE))
      then
        write(c2, index, value)
      else if index < base+(4*(interval/DEGREE))
      then
        write(c3, index, value)
      else if index < base+(5*(interval/DEGREE))
      then
        write(c4, index, value)
      else if index < base+(6*(interval/DEGREE))
      then
        write(c5, index, value)
      else if index < base+(7*(interval/DEGREE))
      then
        write(c6, index, value)
      else
        write(c7, index, value)
    }
    else % HALT
    { halt(c0);
      halt(c1);
      halt(c2);
      halt(c3);
      halt(c4);
      halt(c5);
      halt(c6);
      halt(c7);
      running := false
    }
  }
}

proc serve(chanend x, chanend root) is
{ var query;
  var index;
  var value;
  var running;
 
  % Synchronise
  sync(root);
  x ! 0;

  % Configure the structure
  root ! 0;
  root ! 0;
  root ! N*STORAGE;
  
  % Run
  running := true;
  while running do 
  { x ? query;
    if query = READ
    then 
    { x ? index;
      read(root, index, value);
      x ! value
    }
    else if query = WRITE
    then
    { x ? index;
      x ? value;
      write(root, index, value)
    }
    else % HALT
    { halt(root);
      running := false
    }
  }
}

proc leaf(chanend c) is
{ var base;
  var data[STORAGE];
  var query;
  var index;
  var value;
  var running;
  
  % Synchronise
  c ! 0;

  % Read 'base' value configuration message
  c ? value;
  c ? base;
  c ? value;
  
  % Run
  running := true;
  while running do 
  { c ? query;
    if query = READ
    then
    { c ? index;
      c ! data[index-base]
    }
    else if query = WRITE
    then
    { c ? index;
      c ? value;
      data[index-base] := value
    }
    else % HALT
      running := false
  }
}

proc array(chanend x) is
{ chan c[BRANCHES+N];
  var i;
  server() 
    par i in [0 for N] do 
      leaf(c[BRANCHES+i])
  { par i in [0 for BRANCHES] do
      branch(c[i], 
        c[(DEGREE*i)+1], 
        c[(DEGREE*i)+2], 
        c[(DEGREE*i)+3], 
        c[(DEGREE*i)+4],
        c[(DEGREE*i)+5], 
        c[(DEGREE*i)+6], 
        c[(DEGREE*i)+7], 
        c[(DEGREE*i)+8]) &
   serve(x, c[0])
  }
}

proc main() is
{ server(chan x)
    array(x)
  { var value;
    var i;
    var total;
    var t;
    
    sync(x);

    %read(x, 0, value);
    %write(x, 0, 0);

    total := 0;
    for i in [0 for LENGTH] do
    { t := time();
      read(x, i, value);
      total := total + (time()-t)
    };
    printstr("Average read time (cycles): ");
    printvalln(total/LENGTH);
    
    total := 0;
    for i in [0 for LENGTH] do
    { t := time();
      write(x, i, i);
      total := total + (time()-t)
    };
    printstr("Average write time (cycles): ");
    printvalln(total/LENGTH);

    halt(x)
  } 
}

