val N           is NUM_CORES; % Number of leaves (storage units)
val STORAGE     is 2048/N; % Storage per leaf
val LENGTH      is N*STORAGE;
val ADDR_LEN    is 30;
val ADDR_MASK   is 0x3FFFFFFF;
val QUERY_MASK  is 0xC0000000;
val READ        is (0x1 << ADDR_LEN);
val WRITE       is (0x2 << ADDR_LEN);
val HALT        is (0x3 << ADDR_LEN);
val READY       is (0x4 << ADDR_LEN);
val NUM_ACCESSES is 1000;

proc read(chanend c, val index, var value, var t) is
{ %out(c, READ or index);
  %outctend(c);
  %chkctend(c);
  %inp(c, value);
  %chkctend(c);
  %outctend(c);

  memreadtimed(c, index, value, t)
}

proc write(chanend c, val index, val value, var t) is
{ %out(c, WRITE or index);
  %outctend(c);
  %chkctend(c);
  %out(c, value);
  %outctend(c);
  %chkctend(c);

  memwritetimed(c, index, value, t)
}

proc halt(chanend c) is
{ out(c, HALT);
  outctend(c);
  chkctend(c)
}

proc control(chanend input, chanend begin, chanend end) is
{ var addresses[2];
  var i;
  var j;
  var dest;
  var address;
  var running;
  var query;
  var index;
  var value;
  
  % Collect addresses
  i := 0;
  end ? addresses[1];
  % Check all remaining match
  for j in [2 for N-2] do
  { end ? value;
    assert value = addresses[1]
    %;printval(j); printstr(": address 0x");
    %printhexln(value)
  };
  end ? addresses[0];

  % Notify ready
  input ! READY;

  % Run
  running := true;
  while running do 
  { inp(input, query);
    index := query and ADDR_MASK;
    query := query and QUERY_MASK;
    if query = READ
    then
    { chkctend(input);
      outctend(input);
      dest := index / STORAGE;
      address := addresses[dest>0] + ((index rem STORAGE)<<2);
      %address := base + ((index rem STORAGE)<<2);
      %printstr("Read:  ");printvalln(dest);
      rread(dest, address, value);
      out(input, value);
      outctend(input);
      chkctend(input)
    }
    else if query = WRITE
    then
    { chkctend(input);
      outctend(input);
      inp(input, value);
      dest := index / STORAGE;
      address := addresses[dest>0] + ((index rem STORAGE)<<2);
      %address := base + ((index rem STORAGE)<<2);
      %printstr("Write: ");printvalln(dest);
      rwrite(dest, address, value);
      chkctend(input);
      outctend(input)
    }
    else if query = HALT
    then
    { chkctend(input);
      outctend(input);
      %printstr("Halt");
      begin ! HALT;
      end ? value;
      running := false
    }
    else
    { %printstr("Undefined command ");
      %printhexln(query);
      assert 0
    }
  }
}

proc leaf(val id, chanend left, chanend right) is
{ var data[];
  var v;
  var j;
  v := memalloc(data, STORAGE);
  assert v ~= 0;
  
  % Circulate addresses
  right ! data;
  for j in [0 for id] do
  { left ? v;
    right ! v
  };
  % Wait to halt
  left ? v;
  right ! HALT;
  v := memfree(data)
}

proc array(chanend x) is
{ var i;
  % Small hack: channel declaration taken out of server as replicated
  % connections can't mix normal and server types.
  chan c[N+1];
  server() 
    control(x, c[0], c[N])
    par i in [0 for N] do 
      leaf(i, c[i], c[i+1])
}

proc main() is
{ server(chan x)
    array(x)
  { var value;
    var i;
    var index;
    var total;
    var t;
   
    % Wait until array is ready
    x ? value;

    %write(x, 0, 0xDEADBEEF);
    %read(x, 0, value);

    %total := 0;
    %for i in [0 for NUM_ACCESSES] do
    %{ index := rand() rem LENGTH;
    %  read(x, index, value, t);
    %  total := total + t
    %};
    %%printstr("Average read time (cycles): ");
    %printvalln(total/NUM_ACCESSES);
    %
    %total := 0;
    %for i in [0 for NUM_ACCESSES] do
    %{ index := rand() rem LENGTH;
    %  write(x, index, i, t);
    %  total := total + t
    %};
    %%printstr("Average write time (cycles): ");
    %printvalln(total/NUM_ACCESSES);

    %total := 0;
    %for i in [0 for NUM_ACCESSES] do
    %{ index := rand() rem LENGTH;
    %  if (rand() rem 2) = 0
    %  then
    %  { read(x, index, value, t);
    %    total := total + t
    %  }
    %  else
    %  { write(x, index, i, t);
    %    total := total + t
    %  }
    %};
    %%printstr("Average read/write time (cycles): ");
    %printvalln(total/NUM_ACCESSES);

    %testEmulated(x);
    halt(x)
  } 
}

