val STORAGE     is 1000; % Storage per leaf
val N           is 8; % Number of leaves (storage units)
val LENGTH      is N*STORAGE;
val READ        is 0;
val WRITE       is 1;
val HALT        is 2;

val NUM_STEPS   is 1;

val RDONLY is 0x0001;
val BINARY is 0x8000;

proc leaf(chanend c) is
{ var base;
  %var data[STORAGE];
  var data[];
  var query;
  var index;
  var value;
  var running;
  
  % Read 'base' value configuration message
  c ? value;
  c ? base;
  c ? value;
 
  % Allocate storage
  memalloc(data, STORAGE);

  % Run
  running := true;
  while running do 
  { c ? query;
    if query = READ
    then
    { c ? index;
      c ! data[index-base]
    }
    else if query = WRITE
    then
    { c ? index;
      c ? value;
      data[index-base] := value
    }
    else % HALT
      running := false
  };

  % Free storage
  memfree(data)
}

proc branch(chanend root, chanend left, chanend right) is
{ var depth;
  var base;
  var interval;
  var query;
  var index;
  var value;
  var running;
 
  % Configure: depth, base, interval
  root  ? depth;
  root  ? base;
  root  ? interval;
  left  ! depth + 1;
  right ! depth + 1;
  left  ! base;
  right ! base + (interval/2);
  left  ! interval/2;
  right ! interval/2;
  
  % Run
  running := true;
  while running do
  { root ? query;
    if query = READ
    then 
    { root ? index;
      if index < base+(interval/2)
      then
      { left ! READ;
        left ! index;
        left ? value
      }
      else
      { right ! READ;
        right ! index;
        right ? value
      };
      root ! value
    }
    else if query = WRITE
    then
    { root ? index;
      root ? value;
      if index < base+(interval/2)
      then
      { left ! WRITE;
        left ! index;
        left ! value
      }
      else
      { right ! WRITE;
        right ! index;
        right ! value
      }
    }
    else % HALT
    { left ! HALT;
      right ! HALT;
      running := false
    }
  }
}

proc serve(chanend x, chanend root) is
{ var query;
  var index;
  var value;
  var running;
 
  % Configure the structure
  root ! 0;
  root ! 0;
  root ! N*STORAGE;
  
  % Run
  running := true;
  while running do 
  { x ? query;
    if query = READ
    then 
    { x ? index;
      root ! READ;
      root ! index;
      root ? value;
      x ! value
    }
    else if query = WRITE
    then
    { x ? index;
      x ? value;
      root ! WRITE;
      root ! index;
      root ! value
    }
    else % HALT
    { root ! HALT;
      running := false
    }
  }
}

proc array(chanend x) is
{ chan c[(2*N)-1];
  var i;
  server() 
    par i in [0 for N] do 
      leaf(c[(N-1)+i])
  { serve(x, c[0]) ||
    par i in [0 for N-1] do
      branch(c[i], c[(2*i)+1], c[(2*i)+2])
  }
}

proc read(chanend c, val index, var value) is
{ c ! READ;
  c ! index;
  c ? value
}

proc write(chanend c, val index, val value) is
{ c ! WRITE;
  c ! index;
  c ! value
}

proc halt(chanend c) is
  c ! HALT

proc initgraph(chanend c, var nVertices, var nEdges) is
{ var fd;
  var i;
  var v;
  fd := fopen("graph", RDONLY or BINARY);
  %assert fd ~= (-1);
  fread(fd, nVertices);
  fread(fd, nEdges);
  printval(nVertices); 
  printstrln(" vertices");
  printval(nEdges); 
  printstrln(" edges");
  for i in [0 for nVertices+nEdges] do
  { fread(fd, v);
    write(c, i, v)
  };
  %assert i = (nVertices + nEdges);
  fclose(fd)
}

proc dumpgraph(chanend c, val nVertices, val nEdges) is
{ var i;
  var v;
  for i in [0 for nVertices+nEdges] do
  { read(c, i, v);
    printvalln(v)
  }
}

proc randwalk(chanend c, val nVertices, val nEdges, val startVertex) is
{ var ptr1;
  var ptr2;
  var edge;
  var vertex;
  var i;
  vertex := startVertex;
  for i in [0 for NUM_STEPS] do
  { %printstr("Visited ");
    %printvalln(vertex);
    read(c, vertex, ptr1);
    read(c, vertex+1, ptr2);
    if vertex = nVertices-1 
    then
    { edge := rand() rem (nVertices+nEdges-ptr1);
      read(c, ptr1 + edge, vertex)
      %printstr("  Leaving on ");printvalln(vertex)
    }
    else if ptr2 > ptr1 
    then
    { edge := rand() rem (ptr2 - ptr1);
      read(c, ptr1 + edge, vertex)
      %printstr("  Leaving on ");printvalln(vertex)
    }
    else
    { vertex := rand() rem nVertices
    %; printstr("Jumping to ");printvalln(vertex)
    }
  }
}

proc main() is
  server(chan x)
    array(x)
  { var nVertices;
    var nEdges;
    printstr("Allocated an array of length "); printvalln(LENGTH);
    initgraph(x, nVertices, nEdges);
    %dumpgraph(x, nVertices, nEdges);
    randwalk(x, nVertices, nEdges, 0);
    halt(x)
  }

