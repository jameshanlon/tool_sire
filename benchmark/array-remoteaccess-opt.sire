val N           is NUM_CORES; % Number of leaves (storage units)
val STORAGE     is 4096/N; % Storage per leaf
val LENGTH      is N*STORAGE;
val ADDR_LEN    is 30;
val ADDR_MASK   is 0x3FFFFFFF;
val QUERY_MASK  is 0xC0000000;
val READ        is (0x1 << ADDR_LEN);
val WRITE       is (0x2 << ADDR_LEN);
val HALT        is (0x3 << ADDR_LEN);
val READY       is (0x4 << ADDR_LEN);
val NUM_ACCESSES is 1000;

proc read(chanend c, val index, var value) is
{ var t;

  %out(c, READ or index);
  %outctend(c);
  %chkctend(c);
  %inp(c, value);
  %chkctend(c);
  %outctend(c);

  memreadtimed(c, index, value, t);
  printvalln(t)
}

proc write(chanend c, val index, val value) is
{ var t;

  %out(c, WRITE or index);
  %outctend(c);
  %chkctend(c);
  %out(c, value);
  %outctend(c);
  %chkctend(c);

  memwritetimed(c, index, value, t);
  printvalln(t)
}

proc halt(chanend c) is
{ out(c, HALT);
  outctend(c);
  chkctend(c)
}

proc control(chanend input, chanend begin, chanend end) is
{ %var addresses[N];
  var base;
  var j;
  var dest;
  var address;
  var running;
  var query;
  var index;
  var value;
  
  % Collect addresses
  base := 0;
  for j in [0 for N] do
  { %end ? addresses[N-j-1]
    end ? address;
    if address > base then base := address else skip
  };
  %for j in [0 for N] do
  %{ printval(j); printstr(": address 0x");
  %  printhexln(addresses[j])
  %};

  % Notify ready
  input ! READY;

  % Run
  running := true;
  while running do 
  { inp(input, query);
    index := query and ADDR_MASK;
    query := query and QUERY_MASK;
    if query = READ
    then
    { chkctend(input);
      dest := index / STORAGE;
      %address := addresses[dest] + ((index rem STORAGE)<<2);
      address := base + ((index rem STORAGE)<<2);
      %printstr("Read:  ");printvalln(NUM_CORES-1-dest);
      rread(NUM_CORES-1-dest, address, value);
      out(input, value);
      outctend(input);
      chkctend(input)
    }
    else if query = WRITE
    then
    { chkctend(input);
      %outctend(root);
      inp(input, value);
      dest := index / STORAGE;
      %address := addresses[dest] + ((index rem STORAGE)<<2);
      address := base + ((index rem STORAGE)<<2);
      %printstr("Write: ");printvalln(NUM_CORES-1-dest);
      rwrite(NUM_CORES-1-dest, address, value);
      chkctend(input);
      outctend(input)
    }
    else % HALT
    { chkctend(input);
      outctend(input);
      begin ! HALT;
      end ? value;
      running := false
    }
  }
}

proc leaf(val id, chanend left, chanend right) is
{ var data[];
  var v;
  var j;
  %v := memalloc(data, STORAGE);
  v := memalloc(data, 1);
  
  % Circulate addresses
  right ! data;
  for j in [0 for id] do
  { left ? v;
    right ! v
  };
  % Wait to halt
  left ? v;
  right ! HALT;
  v := memfree(data)
}

proc array(chanend x) is
{ var i;
  % Small hack: channel declaration taken out of server as replicated
  % connections can't mix normal and server types.
  chan c[N+1];
  server() 
    control(x, c[0], c[N])
    par i in [0 for N] do 
      leaf(i, c[i], c[i+1])
}

proc main() is
{ server(chan x)
    array(x)
  { var value;
    var i;
    var index;
    var total;
    var t;
   
    % Wait until array is ready
    x ? value;

    write(x, 0, 0xDEADBEEF);
    read(x, 0, value);

    %total := 0;
    %for i in [0 for NUM_ACCESSES] do
    %{ index := rand() rem LENGTH;
    %  t := time();
    %  read(x, index, value);
    %  total := total + (time()-t)
    %};
    %%printstr("Average read time (cycles): ");
    %printvalln(total/NUM_ACCESSES);
    %
    %total := 0;
    %for i in [0 for NUM_ACCESSES] do
    %{ index := rand() rem LENGTH;
    %  t := time();
    %  %write(x, index, i);
    %  total := total + (time()-t)
    %};
    %%printstr("Average write time (cycles): ");
    %printvalln(total/NUM_ACCESSES);

    %total := 0;
    %for i in [0 for NUM_ACCESSES] do
    %{ index := rand() rem LENGTH;
    %  if (rand() rem 2) = 0
    %  then
    %  { t := time();
    %    %read(x, index, value);
    %    total := total + (time()-t)
    %  }
    %  else
    %  { t := time();
    %    %write(x, index, i);
    %    total := total + (time()-t)
    %  }
    %};
    %%printstr("Average read/write time (cycles): ");
    %printvalln(total/NUM_ACCESSES);

    %t := time();
    %livermore1(x, 40, 101);
    %printvalln(time()-t);

    %t := time();
    %livermore2(x, 40, 101);
    %printvalln(time()-t);

    %t := time();
    %livermore3(x, 53, 101);
    %printvalln(time()-t);

    %t := time();
    %livermore4(x, 70, 101);
    %printvalln(time()-t);

    %t := time();
    %livermore5(x, 55, 101);
    %printvalln(time()-t);

    halt(x)
  } 
}

