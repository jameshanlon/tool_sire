val STORAGE     is 4;   % Storage per leaf
val N           is NUM_CORES; % Number of leaves (storage units)
val LENGTH      is N*STORAGE;
val ADDR_LEN    is 30;
val ADDR_MASK   is 0x3FFFFFFF;
val QUERY_MASK  is 0xC0000000;
val READ        is (0x1 << ADDR_LEN);
val WRITE       is (0x2 << ADDR_LEN);
val HALT        is (0x3 << ADDR_LEN);
val NUM_ACCESSES is 1000;

proc sync(chanend c) is
{ var sync;
  c ? sync
}

proc read(chanend c, val index, var value) is
{ out(c, READ or index);
  outctend(c);
  %chkctend(c);
  inp(c, value);
  chkctend(c);
  outctend(c)
}

proc write(chanend c, val index, val value) is
{ out(c, WRITE or index);
  outctend(c);
  %chkctend(c);
  out(c, value);
  outctend(c);
  chkctend(c)
}

proc halt(chanend c) is
{ out(c, HALT);
  outctend(c);
  chkctend(c)
}

proc leaf(chanend c) is
{ var base;
  var data[STORAGE];
  var query;
  var index;
  var value;
  var running;

  % Synchronise
  c ! 0;

  % Read 'base' value configuration message
  c ? value;
  c ? base;
  c ? value;
  
  % Run
  running := true;
  while running do 
  { inp(c, query);
    index := query and ADDR_MASK;
    query := query and QUERY_MASK;
    if query = READ
    then
    { chkctend(c);
      %outctend(c);
      out(c, data[index-base]);
      outctend(c);
      chkctend(c)
    }
    else if query = WRITE
    then
    { chkctend(c);
      %outctend(c);
      inp(c, value);
      data[index-base] := value;
      chkctend(c);
      outctend(c)
    }
    else % HALT
    { chkctend(c);
      outctend(c);
      running := false
    }
  }
}

proc branch(chanend root, chanend left, chanend right) is
{ var depth;
  var base;
  var interval;
  var cmp;
  var query;
  var index;
  var value;
  var running;
 
  % Synchronise
  sync(left);
  sync(right);
  root ! 0;
 
  % Configure: depth, base, interval
  root  ? depth;
  root  ? base;
  root  ? interval;
  left  ! depth + 1;
  right ! depth + 1;
  left  ! base;
  right ! base + (interval/2);
  left  ! interval/2;
  right ! interval/2;
  cmp := base + (interval/2);
  
  % Run
  running := true;
  while running do
  { inp(root, query);
    index := query and ADDR_MASK;
    query := query and QUERY_MASK;
    if query = READ
    then 
    { chkctend(root);
      %outctend(root);
      if index < cmp
      then
        read(left, index, value)
      else
        read(right, index, value);
      out(root, value);
      outctend(root);
      chkctend(root)
    }
    else if query = WRITE
    then
    { chkctend(root);
      %outctend(root);
      inp(root, value);
      if index < cmp
      then
        write(left, index, value)
      else
        write(right, index, value);
      chkctend(root);
      outctend(root)
    }
    else % HALT
    { chkctend(root);
      outctend(root);
      halt(left);
      halt(right);
      running := false
    }
  }
}

proc serve(chanend x, chanend root) is
{ var query;
  var index;
  var value;
  var running;

  % Synchronise
  root ? query;
  x ! 0;

  % Configure the structure
  root ! 0;
  root ! 0;
  root ! N*STORAGE;
  
  % Run
  running := true;
  while running do 
  { inp(x, query);
    index := query and ADDR_MASK;
    query := query and QUERY_MASK;
    if query = READ
    then 
    { chkctend(x);
      %outctend(x);
      read(root, index, value);
      out(x, value);
      outctend(x);
      chkctend(x)
    }
    else if query = WRITE
    then
    { chkctend(x);
      %outctend(x);
      inp(x, value);
      write(root, index, value);
      chkctend(x);
      outctend(x)
    }
    else % HALT
    { chkctend(x);
      outctend(x);
      halt(root);
      running := false
    }
  }
}

proc array(chanend x) is
{ chan c[(2*N)-1];
  var i;
  server() 
    par i in [0 for N] do 
      leaf(c[(N-1)+i])
  { serve(x, c[0]) ||
    par i in [0 for N-1] do
      branch(c[i], c[(2*i)+1], c[(2*i)+2])
  }
}

proc main() is
{ server(chan x)
    array(x)
  { var value;
    var i;
    var index;
    var total;
    var t;
    
    sync(x);

    %read(x, 0, value);
    %write(x, 0, 0);

    total := 0;
    for i in [0 for NUM_ACCESSES] do
    { index := rand() rem LENGTH;
      t := time();
      read(x, index, value);
      total := total + (time()-t)
    };
    %printstr("Average read time (cycles): ");
    printvalln(total/NUM_ACCESSES);
    
    total := 0;
    for i in [0 for NUM_ACCESSES] do
    { index := rand() rem LENGTH;
      t := time();
      write(x, index, i);
      total := total + (time()-t)
    };
    %printstr("Average write time (cycles): ");
    printvalln(total/NUM_ACCESSES);

    total := 0;
    for i in [0 for NUM_ACCESSES] do
    { index := rand() rem LENGTH;
      if (rand() rem 2) = 0
      then
      { t := time();
        read(x, index, value);
        total := total + (time()-t)
      }
      else
      { t := time();
        write(x, index, i);
        total := total + (time()-t)
      }
    };
    %printstr("Average read/write time (cycles): ");
    printvalln(total/NUM_ACCESSES);

    halt(x)
  } 
}

