val FIX_IBITS := 8;
val FIX_DBITS := 24;

val FIX_HALF := 0x00800000;
val FIX_QUAR := 0x00400000;
val FIX_EIGH := 0x00200000;

func fix(val x) is
  return x << FIX_DBITS

func unfix(val x) is
  return x >> FIX_DBITS

func mul(val x, val y) is
  return mulf8_24(x, y)

func div(val x, val y) is
  return divf8_24(x, y)

proc printfix(val x) is
  var n;
  var i;
{ if x < 0 then
  { printchar('-')
  ; x := -x
  }
  else skip
; n := unfix(x)
; printval(n)
; printchar('.')
; for i := 0 to FIX_IBITS do
  { x := x - fix(n)
  ; x := x * 10
  ; n := unfix(x)
  ; printchar(n+'0')
  }
}

proc printfixln(val x) is
{ printfix(x) ; println() }

proc main() is
  var v;
{ 
% Addition
  v := fix(3) + fix (2)       ; printfixln(v)
; v := fix(5) + FIX_HALF      ; printfixln(v)
; v := fix(5) + FIX_QUAR      ; printfixln(v)

% Subtraction
; v := fix(3) - fix (2)       ; printfixln(v)
; v := fix(5) - FIX_HALF      ; printfixln(v)
; v := fix(5) - FIX_QUAR      ; printfixln(v)

% Multiplication
; v := mul(fix(5),  FIX_HALF) ; printfixln(v)
; v := mul(fix(17), FIX_QUAR) ; printfixln(v)
; v := mul(fix(9),  FIX_EIGH) ; printfixln(v)

% Division
; v := div(fix(4),  fix(2))   ; printfixln(v)
; v := div(fix(60), fix(8))   ; printfixln(v)
; v := div(fix(15), fix(6))  ; printfixln(v)
}
