val N := 10;

% Merge
proc merge(val a[x], val b[y], var array[n], var scratch[n], 
    val x, val y, val n) is
  var i;
  var j;
  var k;
{ i := 0 
; j := 0 
; k := 0
; while (i < x) and (j < y) do 
  { if(a[i] <= b[j])
    then 
    { scratch[k] := a[i]
    ; i := i+1
    } 
    else 
    { scratch[k] := b[j]
    ; j := j+1 
    }
    ; k := k+1
  }
; if i<x then
    while i<x do
    {  scratch[k] := a[i] 
    ; k := k+1
    ; i := i+1
    }
  else skip
; if j<y then 
    while j<y do
    { scratch[k] := b[j] 
    ; k := k+1
    ; j := j+1
    }
  else skip

  % Copy scratch back into the array
; for i:=0 to n-1 do
    array[i] := scratch[i]
}

% Merge sort
proc msort(var array[n], var scratch[n], val n) is
  var a[];
  var b[]; 
  var x;
  var y;
{ if n > 1 then
  { x := n >> 1
  ; y := n - x
  ; a aliases array[0:x]
  ; b aliases array[x:n]
  ; msort(a, scratch, x)
  ; msort(b, scratch, y)
  ; merge(a, b, array, scratch, x, y, n)
  }
  else skip
}

% Ouput: 0123456789
proc main() is
  var a[N];
  var scratch[N];
  var i;
{ for i:=0 to N-1 do a[i] := N-(i+1)
; msort(a, scratch, N)
; for i:=0 to N-1 do printval(a[i])
; printstrln("")
}

