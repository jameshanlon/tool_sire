val N is 16;
val THRESHOLD is 4;
% This will subdivide twice creating 8 processes

% Merge
proc merge(var a[m], var b[n], var A[o], var S[o], 
    val m, val n, val o) is
{ var i;
  var j;
  var k;
  i:=0;
  j:=0;
  k:=0;
  while (i < m) and (j < n) do 
  { if(a[i] <= b[j])
    then
    { S[k] := a[i];
      i := i+1
    }
    else 
    { S[k] := b[j];
      j := j+1 
    };
    k := k+1
  };
  if i<m then
    while i<m do
    { S[k] := a[i] 
    ; k := k+1
    ; i := i+1
    }
  else skip;
  if j<n then 
    while j<n do
    { S[k] := b[j] 
    ; k := k+1
    ; j := j+1
    }
  else skip;

 % Copy scratch back into the array
 for i in [0 for o] do A[i] := S[i]
}

% Merge sort
proc msort(val t, val n, var A[len], var S[len], val len) is
{ var i;
  var j;
  if len > 1 then 
  { i := len / 2;
    j := len - i;
    if len > THRESHOLD then
    { on t+(n/2) do msort(t+(n/2), n/2, A[i for j], S[i for j], j) ||
      msort(t, n/2, A[0 for i], S[0 for i], i) 
    }
    else
    { msort(t, n/2, A[0 for i], S[0 for i], i);
      msort(t+(n/2), n/2, A[i for j], S[i for j], j) 
    };
    merge(A[0 for i], A[i for j], A, S, i, j, len)
  }
  else skip
}

proc main() is
{ var A[N];
  var S[N];
  var i;
  for i in [0 for N] do A[i] := N-(i+1);
  msort(0, NUM_CORES, A, S, N);
  for i in [0 for N] do 
  { printval(A[i]); 
    printstr(" ")
  };
  printstrln("")
}

