val D    := 3;       % Tree depth
val N    := 1 << D;  % Number of leaves
val LEN  := 100;     % Number of data items at each leaf.
val SIZE := N * LEN;
val PUT  := 0;
val GET  := 1;

func hash(val v) is
  return ((v+(v>>3))+(v<<2)) rem SIZE

proc serve(chanend c, chanend t) is
  var query;
  var key;
  var value;
{ c ? query;
  if query = PUT
  then
  { c ? key;
    c ? value;
    t ! PUT;
    t ! hash(key);
    t ! value
  }
  else 
  if query = GET
  then
  { c ? key;
    t ! GET;
    t ! hash(key);
    t ? value;
    c ! value
  }
  else skip
}

proc branch(chanend root, chanend left, chanend right) is
  var query;
  var key;
  var value;
{ while true do
  { root ? query;
    if query = PUT
    then
    { root  ? key;
      root  ? value;
      left  ! PUT;
      left  ! key;
      left  ! value;
      right ! PUT;
      right ! key;
      right ! value
    }
    else
    if query = GET
    then
    { root  ? key;
      left  ! GET;
      left  ! key;
      left  ? value;
      root  ! value;
      right ! GET;
      right ! key;
      right ? value;
      root  ! value
    }
    else skip
  }
}

proc leaf(val i, chanend c) is
  var table[LEN];
  var query;
  var key;
  var value;
{ while true do
  { c ? query;
    if query = PUT
    then
    { c ? key;
      c ? value;
      table[key-(i*LEN)] := value
    }
    else
    { c ? key;
      c ! table[key-(i*LEN)]
    }
  }
}

proc table(chanend query) is
  chan c[(2*N)-1];
  var i;
{ serve(query, c[0]) ||
  par i in [0 for N-1] do
    branch(c[i], c[(2*i)+1], c[(2*i)+2]) ||
  par i in [0 for N] do 
    leaf(i, c[(N-1) + i])
}

% put(key, data)
proc put(chanend c, val key, val value) is
{ c ! PUT;
  c ! key; 
  c ! value
}

% get(key) returns data
proc get(var value, chanend c, val key) is
{ c ! GET;
  c ! key;
  c ? value
}

proc main() is
  chan c;
  var value;
{ table(c) ||
  { put(c, 1, 0xDEADBEEF);
    put(c, 34, 0xBADF00D);
    get(value, c, 1);
    assert value = 0xDEADBEEF;
    get(value, c, 34);
    assert value = 0xBADF00D
  }
}

