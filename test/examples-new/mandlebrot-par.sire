val FIX_DBITS := 24;
val FIX_HALF := 0x00800000;
val FIX_QUAR := 0x00400000;

val XDIM := 80;
val YDIM := 40;
val COUNT := 40;

func fix(val x) is
  return x << FIX_DBITS

func plot(val i) is
  if i > 32      then printchar(' ')
  else if i > 16 then printchar('.')
  else if i > 8  then printchar(':')
  else if i > 3  then printchar('+')
  else if i > 1  then printchar('%')
  else                printchar('#')

proc compute(val xmin, val ymin, val xmax, val ymax) is
  var dx;
  var dy;
  var xn;
  var x0;
  var y0;
  var p;
  var q;
  var i;
  var x;
  var y;
  var iterations;
{ iterations := 0
; dx := divf8_24(xmax-xmin, fix(XDIM))
; dy := divf8_24(ymax-ymin, fix(YDIM))
; par y:=0 for YDIM-1 do
  { par x:=0 for XDIM-1 do
    { p := xmin + mulf8_24(fix(x), dx)
    ; q := ymin + mulf8_24(fix(y), dy)
    ; xn := 0
    ; x0 := 0
    ; y0 := 0
    ; i := 0
    ; while ((mulf8_24(xn,xn)+mulf8_24(y0,y0)) < fix(4)) 
        and (i < COUNT) do
      { i := i + 1
      ; xn := mulf8_24(x0+y0, x0-y0) + p
      ; y0 := mulf8_24(fix(2), mulf8_24(x0, y0)) + q
      ; x0 := xn
      }
    ; plot(i)
    ; iterations := iterations + i
    }
  ; println()
  }
%; printval(iterations)
%; printstrln(" iterations.")
}

% Initial parameters:
%   xmin := -2
%   ymin := -1.25
%   xmax := 0.75
%   ymax := 1.25
proc main() is
  var xmin;
  var ymin;
  var xmax;
  var ymax;
{ xmin := fix(-2)
; ymin := (fix(1) + FIX_QUAR)*(-1)
; xmax := FIX_HALF + FIX_QUAR
; ymax := fix(1) + FIX_QUAR
; compute(xmin, ymin, xmax, ymax)
}


