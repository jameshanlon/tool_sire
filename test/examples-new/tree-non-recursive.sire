val D := 4;
val N := 1 << D;
val LEN := 100;

func f(val v) is
  return v

func g(val u, val v) is
  return u + v

proc leaf(chanend c) is
  var data[LEN];
  var enq;
  var found;
  var i;
{ % initialise the data
  while true do
  { found := false
  ; for i in [0 for LEN] do
      found := (data[i] = enq) or found
  ; c ! found
  }
}

proc branch(chanend c, chanend left, chanend right) is
  var enq;
  var lfound;
  var rfound;
{ while true do
  { c ? enq
  ; left ! enq 
  ; right ! enq
  ; left ? lfound 
  ; right ? rfound
  ; c ! lfound or rfound
  }
}

proc tree(chanend input) is
  chan c[2*N-1];
  var v;
  var i;
{
  { input ? v ; c[0] ! v } ||
  par i in [0 for N-1] do
    branch(c[i], c[2*i+1], c[2*i+2]) ||
  par i in [0 for N] do 
    leaf(c[N-1+i])
}

proc main() is
  chan c;
  var enq;
  var result;
{ { c ! enq ; c ? result } ||
  tree(c)
}

