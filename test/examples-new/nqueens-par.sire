val N := 8;

% Check no queens in same row or column, runs in O(N)
func valid(val i, val q[N]) is
  var valid;
  var k;
{ valid := true
; k := 0
; while k < i and valid do
    if (q[i] = q[k]) or ((q[i]-q[k]) = (i-k)) 
    then
    { valid := false
    ; k := k + 1
    }
    else skip
; return valid
}

proc tryall(val i, val q[N], var succ, var result[N]);

% Try queen i in position j
proc try(val i, val j, val q[N], var s, var R[N]) is
  var q1[N];
  var k;
{ s := true
; if valid(i, q) then
  { for k:=0 to N-1 do q1[k] := q[k]
  ; q1[i] := j
  ; if i < N
    then tryall(i+1, q1, s, R)
    else
    { for k:=0 to N-1 do R[k] := q1[k]
    ; s := true
    }
  }
  else skip
}

% Try all positons of queen i in parallel
proc tryall(val i, val q[N], var s, var R[N]) is
  var S[N];   % par success array
  var T[N*N]; % par results array
  var j;
  var k;
{ par j:=1 for N do 
    try(i, j, q, S[j], T[(j-1)*N:j*N])
; s := false
; for j:=0 to N-1 do
    if S[j] then
    { for k:=0 to N-1 do R[k] := T[j*N+k]
    ; s := true
    }
    else skip
}

proc main() is
  var q[N];
  var R[N];
  var s;
  var i;
{ for i:=0 to N-1 do q[i] := N+1
; tryall(0, q, s, R)
; if s 
  then for i:=0 to N-1 do printval(q[i])
  else skip
; println()
}
