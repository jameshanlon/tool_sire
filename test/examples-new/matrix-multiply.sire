val N := 4;

% North row: source x values
proc produce_xj(val j, chanend south) is
  while true do south ! 1

% West column: sink output values
proc consume_yi(val i, chanend east) is
  var vi;
  while true do east ? vi

% East column: source k offsets
proc offset(val ki, chanend west) is
  while true do west ! ki

% Multiplier cell
proc multiplier(val aij, chanend north, chanend south, 
    chanend west, chanend east) is
  var xj;
  var yi; % responsible for a values
{ north ? xj
; while true do
  { south ! xj
  ; east ? yi
  ; west ! yi + (aij * xj)
  ; north ? xj
  }
}

% South row sink for unused outputs
proc sink(chanend north) is
  var v;
  while true do north ? v

proc main() is
  var A[N*N];
  var k[N];
  chan x[N*(N+1)];
  chan y[N*(N+1)];
  var i;
  var j;
{
  % initialize A and k
  skip
  
; { par j in [0 for N] do 
      produce_xj(j, y[j]) ||
    
    par i in [0 for N] do 
      offset(k[i], x[(N*N) + i]) ||

    par i in [0 for N], j in [0 for N] do 
        multiplier(A[(N*i) + j],
          y[(N*i) + j], y[(N * (i+1)) + j],
          x[i + (N*j)], x[i + (N * (j+1))]) ||

    par j in [0 for N] do 
      sink(y[(N*N) + j]) ||

    par i in [0 for N] do 
      consume_yi(i, x[i])
  }
}

