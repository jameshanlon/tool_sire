# Copyright (c) 2011, James Hanlon, All rights reserved
# This software is freely distributable under a derivative of the
# University of Illinois/NCSA Open Source License posted in
# LICENSE.txt and at <http://github.xcore.com/>

#-----------------------------------------------------------------
# Each line denotes an AST node and has the following syntax:
#   <parent>.<node>: [<attribue>*]
#
# Each entry is a Node sub-class name, listing the attributes
# and child nodes of the class:
#   <name>*     - a child node
#   <name>**    - a sequence of child nodes
#   <name>      - an attribute
#
# 'Node' is the root parent.
#-----------------------------------------------------------------

# Program
Node.Program:        [decls**, defs**]

# Variable declarations
Node.Decl:           [name, type, expr]

# Procedure declarations
Node.Def:            [name, type, formals**, decls**, stmt*]

# Formal parameters
Node.Param:          [name, type, expr]

# Statements
Node.Stmt:           []
Stmt.StmtSeq:        [stmt**]
Stmt.StmtPar:        [stmt**]
Stmt.StmtAss:        [left*, expr*]
Stmt.StmtIn:         [left*, expr*]
Stmt.StmtOut:        [left*, expr*]
Stmt.StmtAlias:      [left*, slice*]
Stmt.StmtConnect:    [left*, id*, expr*, master]
Stmt.StmtWhile:      [cond*, stmt*]
Stmt.StmtFor:        [index*, stmt*]
Stmt.StmtRep:        [indicies**, stmt*]
Stmt.StmtIf:         [cond*, thenstmt*, elsestmt*]
Stmt.StmtOn:         [expr*, stmt*]
Stmt.StmtPcall:      [name, args**]
Stmt.StmtAssert:     [expr*]
Stmt.StmtReturn:     [expr*]
Stmt.StmtSkip:       []

# Expressions
Node.Expr:           []
Expr.ExprSingle:     [elem*]
Expr.ExprUnary:      [op, elem*]
Expr.ExprBinop:      [op, elem*, right*]

# Elements
Node.Elem:           []
Elem.ElemId:         [name]
Elem.ElemSub:        [name, expr*]
Elem.ElemSlice:      [name, base*, count*]
Elem.ElemIndexRange: [name, base*, count*]
Elem.ElemGroup:      [expr*]
Elem.ElemFcall:      [name, args**]
Elem.ElemNumber:     [value]
Elem.ElemBoolean:    [value]
Elem.ElemString:     [value]
Elem.ElemChar:       [value]

